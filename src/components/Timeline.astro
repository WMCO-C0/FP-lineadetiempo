---
// FalsosPositivosTimeline.astro
---

<div class="container">
  <div id="timeline-embed">
    <div class="loading">Cargando línea de tiempo...</div>
  </div>
</div>

<style>
  body {
    font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    color: #333;
    margin: 0;
    padding: 0;
    background-color: #f5f5f5;
  }

  .container {
    width: 98%;
    max-width: 1800px;
    margin: 0 auto;
    padding: 20px 5px;
  }

  header {
    background-color: #8e0e00;
    color: white;
    padding: 20px 0;
    margin-bottom: 20px;
    text-align: center;
  }

  h1 {
    margin: 0;
    font-size: 2em;
  }

  #timeline-embed {
    margin: 20px 0;
    height: 900px;
    width: 100%;
    max-width: 100%;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }

  /* Estilos para TimelineJS */
  :global(.tl-timeline) {
    font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif !important;
    font-size: 16px !important;
  }

  :global(.tl-timeline h1),
  :global(.tl-timeline h2),
  :global(.tl-timeline h3) {
    font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif !important;
    margin: 10px 0 !important;
  }

  :global(.tl-timeline .tl-timeline-content-container) {
    max-height: none !important;
    min-height: 800px !important;
    overflow: visible !important;
  }

  :global(.tl-timeline .tl-timeline-content-container .tl-timeline-content) {
    max-width: 1000px !important;
    min-width: 600px !important;
    min-height: 1000px !important;
    padding: 40px 50px !important;
    font-size: 20px !important;
    line-height: 1.8 !important;
    background: rgba(255, 255, 255, 0.95) !important;
    border-radius: 12px !important;
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15) !important;
    margin: 20px auto !important;
    overflow: visible !important;
  }

  :global(.tl-timeline .tl-timeline-content h2.tl-headline) {
    font-size: 36px !important;
    margin: 0 0 25px 0 !important;
    color: #8e0e00 !important;
    font-weight: 700 !important;
    line-height: 1.3 !important;
    padding-bottom: 20px !important;
    border-bottom: 2px solid #f0f0f0 !important;
  }

  :global(.tl-timeline .tl-timeline-content p) {
    font-size: 20px !important;
    line-height: 1.8 !important;
    margin-bottom: 20px !important;
    color: #333 !important;
  }

  :global(.tl-timeline .tl-timeline-content img) {
    max-width: 100% !important;
    height: auto !important;
    margin: 15px 0 !important;
    border-radius: 4px !important;
  }

  .info-box {
    background-color: #fff3f2;
    border-left: 4px solid #8e0e00;
    padding: 15px;
    margin: 20px 0;
    border-radius: 0 4px 4px 0;
  }

  .loading {
    text-align: center;
    padding: 50px;
    font-size: 18px;
    color: #666;
  }
</style>

<script>
  // Importar TimelineJS
  const loadTimelineJS = () => {
    return new Promise((resolve, reject) => {
      // Cargar CSS
      const link = document.createElement("link");
      link.rel = "stylesheet";
      link.href =
        "https://cdn.knightlab.com/libs/timeline3/latest/css/timeline.css";
      document.head.appendChild(link);

      // Cargar JS
      const script = document.createElement("script");
      script.src =
        "https://cdn.knightlab.com/libs/timeline3/latest/js/timeline.js";
      script.onload = resolve;
      script.onerror = reject;
      document.head.appendChild(script);
    });
  };

  // Función principal
  const initTimeline = async () => {
    try {
      // Cargar TimelineJS
      await loadTimelineJS();

      // Consulta SPARQL para obtener más víctimas de falsos positivos
      const sparqlQuery = `
                SELECT DISTINCT ?persona ?personaLabel ?fechaMuerte ?lugarMuerteLabel ?imagen ?descripcion
                WHERE {
                    {
                        # Personas relacionadas con falsos positivos (diferentes formas de relacionar)
                        {
                            ?persona wdt:P793 wd:Q779179 .  # relacionado con falsos positivos
                        } UNION {
                            ?persona wdt:P1196/wdt:P279* wd:Q779179 .  # causa de muerte relacionada
                        } UNION {
                            ?persona wdt:P1343 wd:Q779179 .  # descrito en relación a falsos positivos
                        }
                        
                        # Filtros básicos
                        ?persona wdt:P31 wd:Q5 ;  # instancia de ser humano
                                wdt:P570 ?fechaMuerte .  # tiene fecha de muerte
                        
                        # Filtro de tiempo ampliado
                        FILTER(YEAR(?fechaMuerte) >= 1996 && YEAR(?fechaMuerte) <= 2014)
                    }
                    
                    # Lugar de muerte
                    OPTIONAL { 
                        ?persona wdt:P20 ?lugarMuerte .
                        ?lugarMuerte rdfs:label ?lugarMuerteLabel .
                        FILTER(LANG(?lugarMuerteLabel) = "es")
                    }
                    
                    # Imagen
                    OPTIONAL { ?persona wdt:P18 ?imagen . }
                    
                    # Descripción
                    OPTIONAL { 
                        ?persona schema:description ?descripcion .
                        FILTER(LANG(?descripcion) = "es")
                    }
                    
                    # Etiqueta en español
                    SERVICE wikibase:label {
                        bd:serviceParam wikibase:language "es,en" .
                        ?persona rdfs:label ?personaLabel .
                    }
                }
                ORDER BY ?fechaMuerte
                LIMIT 200
            `;

      // Función para formatear la fecha para TimelineJS
      function formatDateForTimeline(dateString: string | undefined) {
        if (!dateString) return "";
        const date = new Date(dateString);
        return {
          year: date.getUTCFullYear(),
          month: date.getUTCMonth() + 1,
          day: date.getUTCDate(),
          hour: date.getUTCHours(),
          minute: date.getUTCMinutes(),
        };
      }

      // Función para cargar los datos
      async function loadTimelineData() {
        try {
          const endpointUrl = "https://query.wikidata.org/sparql";
          const fullUrl =
            endpointUrl +
            "?query=" +
            encodeURIComponent(sparqlQuery) +
            "&format=json";

          // Función para obtener un color basado en el lugar de muerte (solo para los puntos de la línea de tiempo)
          function getColorForPlace(place: string | undefined) {
            if (!place) return "#8e0e00"; // Color por defecto

            const colors = {
              bogotá: "#1f77b4",
              medellín: "#ff7f0e",
              cali: "#2ca02c",
              barranquilla: "#d62728",
              cartagena: "#9467bd",
              cúcuta: "#8c564b",
              bucaramanga: "#e377c2",
              pereira: "#7f7f7f",
              "santa marta": "#bcbd22",
              ibague: "#17becf",
            };

            const placeLower = place.toLowerCase();
            for (const [key, color] of Object.entries(colors)) {
              if (placeLower.includes(key)) {
                return color;
              }
            }

            // Generar un color aleatorio si no coincide con los lugares conocidos
            return "#" + Math.floor(Math.random() * 16777215).toString(16);
          }

          // Obtener los datos de Wikidata
          const response = await fetch(fullUrl, {
            headers: {
              Accept: "application/sparql-results+json",
              "User-Agent": "FalsosPositivosTimeline/1.0",
            },
          });

          if (!response.ok) {
            throw new Error(
              `Error en la consulta: ${response.status} ${response.statusText}`
            );
          }

          const data = await response.json();

          // Procesar los resultados para TimelineJS
          const events = data.results.bindings.map((item: any) => {
            const fechaMuerte = formatDateForTimeline(item.fechaMuerte?.value);
            const lugar = item.lugarMuerteLabel?.value || "Lugar desconocido";
            const descripcion =
              item.descripcion?.value || "Sin descripción disponible";
            const imagen = item.imagen?.value || "";
            const enlace =
              item.persona?.value.replace(
                "http://www.wikidata.org/entity/",
                "https://www.wikidata.org/wiki/"
              ) || "";

            const lugarMuerte = item.lugarMuerteLabel?.value || "Desconocido";
            const color = getColorForPlace(lugarMuerte);

            // Crear el evento con la información básica
            const event = {
              start_date: fechaMuerte,
              text: {
                headline: item.personaLabel.value,
                text: `<p>${descripcion}</p><p><strong>Lugar:</strong> ${lugarMuerte}</p><p><a href="${enlace}" target="_blank">Más información en Wikidata</a></p>`,
                headline_class: "event-title",
                text_class: "event-text",
              },
              // group: lugarMuerte, // Comentado para eliminar la agrupación por lugar
              display_date: fechaMuerte
                ? new Date(item.fechaMuerte.value).toLocaleDateString("es-ES")
                : "Fecha desconocida",
              // Configuración de la banderilla
              media: {
                url: "",
                caption: item.personaLabel.value, // Texto en la banderilla
                credit: lugarMuerte, // Subtítulo en la banderilla
                thumbnail: "",
              },
              // Estilo de la banderilla (sin fondo de color)
              style: {
                color: "#000000",
                "border-radius": "4px",
                padding: "5px 10px",
              },
              // Color solo para el punto en la línea de tiempo
              background: {
                color: color,
                opacity: 1
              },
              unique_id: item.persona.value,
            };

            // Agregar imagen si existe
            if (imagen) {
              event.media.url = imagen;
              event.media.thumbnail = imagen;
            }

            return event;
          });

          // Crear la línea de tiempo
          if (events.length > 0) {
            const loadingElement =
              document.querySelector<HTMLElement>(".loading");
            if (loadingElement) {
              loadingElement.style.display = "none";
            }

            const timelineData = {
              title: {
                text: {
                  headline: "<h4>Falsos Positivos en Colombia</h4>",
                  text: "<p>Línea de tiempo de las víctimas de ejecuciones extrajudiciales (2002-2008)</p>",
                  headline_class: "timeline-title",
                },
              },
              events: events,
            };

            // Inicializar la línea de tiempo
            console.log("Datos a mostrar:", timelineData);

            // Configuración de la línea de tiempo
            const options = {
              language: "es",
              start_at_end: false,
              initial_zoom: 1,
              timenav_height: 250,
              timenav_position: "bottom",
              scale_factor: 2,
              marker_padding: 10,
              marker_height_min: 40,
              marker_width_min: 200,
              // Ocultar la columna de lugares
              show_media_icon: false,
              show_media_caption: false,
              show_media_thumbnail: false,
              show_text: true,
              // Mostrar el texto en las banderillas
              marker_display: "text",
              // Asegurar que se vean los títulos
              timenav_height_percentage: 80,
              optimal_tick_width: 100,
              // Estilo de las banderillas
              marker_style: {
                "font-size": "14px",
                "font-weight": "bold",
                padding: "5px 10px",
                "border-radius": "4px",
              },
              // Deshabilitar la navegación por grupos (lugares)
              group_by: false,
            };

            try {
              // @ts-ignore
              window.timeline = new TL.Timeline(
                "timeline-embed",
                timelineData,
                options
              );
              console.log("Línea de tiempo inicializada correctamente");

              const loadingElement2 =
                document.querySelector<HTMLElement>(".loading");
              if (loadingElement2) {
                loadingElement2.style.display = "none";
              }
            } catch (error: any) {
              console.error("Error al inicializar la línea de tiempo:", error);
              const loadingElement =
                document.querySelector<HTMLElement>(".loading");
              if (loadingElement) {
                loadingElement.innerHTML = `Error al crear la línea de tiempo: ${error.message}`;
              }
            }
          } else {
            const loadingElement =
              document.querySelector<HTMLElement>(".loading");
            if (loadingElement) {
              loadingElement.innerHTML =
                "No se encontraron resultados. Intenta con una consulta más amplia.";
            }
          }
        } catch (error: any) {
          console.error("Error al cargar los datos:", error);
          const loadingElement =
            document.querySelector<HTMLElement>(".loading");
          if (loadingElement) {
            const errorMessage = error?.message || "Error desconocido";
            loadingElement.innerHTML = `Error al cargar los datos: ${errorMessage}`;
          }
        }
      }

      // Cargar los datos
      loadTimelineData();
    } catch (error: unknown) {
      console.error("Error al cargar TimelineJS:", error);
      const loadingElement = document.querySelector<HTMLElement>(".loading");
      if (loadingElement) {
        const errorMessage =
          error instanceof Error ? error.message : "Error desconocido";
        loadingElement.innerHTML = `Error al cargar TimelineJS: ${errorMessage}`;
      }
    }
  };

  // Ejecutar cuando el DOM esté listo
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initTimeline);
  } else {
    initTimeline();
  }
</script>
